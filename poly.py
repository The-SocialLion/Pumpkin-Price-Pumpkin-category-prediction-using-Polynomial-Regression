# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w9AU0syLBdQF7Gd9WCgPvalJhefOk20U
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('atlanta_9-24-2016_9-30-2017.csv')
dataset['Average Price']=((dataset['Low Price']+dataset['High Price'])/2)
dataset=dataset.drop(columns=[ 'Commodity Name','City Name','Type','Sub Variety','Grade','Date','Low Price','High Price','Mostly Low','Mostly High','Origin District','Color','Environment','Unit of Sale','Quality','Condition','Appearance','Storage','Crop','Repack','Trans Mode'])
dataset=dataset.dropna(how='any')
y=dataset.iloc[:,-1].values
X=dataset.iloc[:,:-1].values

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
X[:,0]=le.fit_transform(X[:,0])
X[:,1]=le.fit_transform(X[:,1])
X[:,2]=le.fit_transform(X[:,2])
X[:,3]=le.fit_transform(X[:,3])
print(X)

print(y)

y=y.reshape(len(y),1)
print(y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
poly_reg = PolynomialFeatures(degree = 9)
X_train = poly_reg.fit_transform(X_train)
X_test = poly_reg.fit_transform(X_test)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_train, y_train)

y_pred =lin_reg_2.predict(X_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Note: this is one way of implmenting the algorithm based on the size and other features now let us try the reverse method  and see if it performs as expected"""

dataset = pd.read_csv('atlanta_9-24-2016_9-30-2017.csv')
dataset['Average Price']=((dataset['Low Price']+dataset['High Price'])/2)
dataset['Size']=dataset['Item Size']#making anew column size as the last column so that preprocessing would be easy
dataset=dataset.drop(columns=[ 'Item Size','Commodity Name','City Name','Type','Sub Variety','Grade','Date','Low Price','High Price','Mostly Low','Mostly High','Origin District','Color','Environment','Unit of Sale','Quality','Condition','Appearance','Storage','Crop','Repack','Trans Mode'])
dataset=dataset.dropna(how='any')
X=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
X[:,0]=le.fit_transform(X[:,0])
X[:,1]=le.fit_transform(X[:,1])
X[:,2]=le.fit_transform(X[:,2])
y=le.fit_transform(y)
print(X)

print(y)

y=y.reshape(len(y),1)
print(y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
poly_reg = PolynomialFeatures(degree = 9)
X_train = poly_reg.fit_transform(X_train)
X_test = poly_reg.fit_transform(X_test)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_train, y_train)

y_pred =lin_reg_2.predict(X_test)
np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))